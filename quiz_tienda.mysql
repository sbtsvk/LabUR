CREATE DATABASE TiendaOnline;

USE TiendaOnline;

# -10 puntos :(
# Perdón profe no vuelve a pasar

CREATE TABLE Cliente
(
	idCliente INT(11) NOT NULL AUTO_INCREMENT,
    nombreCliente VARCHAR(15),
    apellidoCliente VARCHAR(15),
    fechaNacimiento DATE,
    PRIMARY KEY (idCliente)
);


CREATE TABLE Producto
(
	idProducto INT NOT NULL AUTO_INCREMENT UNIQUE,
    codigoBarras VARCHAR(25),
    nombreProducto VARCHAR(50),
    Marca VARCHAR(15),
    Precio NUMERIC(17,2),
    PRIMARY KEY (codigoBarras)
);

CREATE TABLE Usuario
(
	idUsuario INT(11) NOT NULL AUTO_INCREMENT,
    rolUsuario ENUM('Empleado','Admin'),
    nombreUsuario VARCHAR(15),
    apellidoUsuario VARCHAR(15),
    PRIMARY KEY(idUsuario)
);

CREATE TABLE Venta
(
	idVenta INT(11) NOT NULL AUTO_INCREMENT,
    fechaVenta DATE,
    idUsuarioFK INT(11) NOT NULL,
    idClienteFK INT(11) NOT NULL,
	PRIMARY KEY(idVenta),
    FOREIGN KEY(idUsuarioFK) REFERENCES Usuario(idUsuario),
    FOREIGN KEY(idClienteFK) REFERENCES Cliente(idCliente)
);

CREATE TABLE Producto_Venta
(
	idVentaFK INT(11) NOT NULL,
    codigoBarrasFK VARCHAR(25) NOT NULL,
    Cantidad INT(5),
    Total NUMERIC(19,2),
    FOREIGN KEY(idVentaFK) REFERENCES Venta(idVenta),
    FOREIGN KEY(codigoBarrasFK) REFERENCES Producto(codigoBarras)
);

INSERT INTO Cliente(nombreCliente, apellidoCliente,fechaNacimiento) VALUES
('Amelia','Sabi','2005-06-25'),
('Antonio','Atala','2005-06-25'),
('Thomas','Neira','2005-09-04'),
('Caren','Rincón','2005-05-08'),
('John','Petrucci','1967-07-12'),
('John','Myung','1967-01-24'),
('Jane','Doe','2000-01-01');

INSERT INTO Producto(codigoBarras, nombreProducto, Marca, Precio) VALUES
('191181716','Teclado K65 Mini','Corsair','600000.00'),
('192637465','Mouse G203','Logitec','190000.00'),
('111111111','Deskmat','Razer','70000.00'),
('191919191','Tortuga Cerámica','Céramimax','15000.00');

INSERT INTO Usuario(rolUsuario, nombreUsuario, apellidoUsuario) VALUES
(1,'Bob','Dale'),
(2,'Chad','Chadus'),
(1,'Tom','Apostol'),
(1,'Admin','Gust');

INSERT INTO Venta(fechaVenta, idUsuarioFK, idClienteFK) VALUES
('2024-01-01',1,1),
('2024-01-04',2,1),
('2024-01-01',2,1),
('2024-01-04',3,2),
('2024-01-01',3,2),
('2024-01-02',1,1),
('2024-01-03',4,4),
('2024-01-03',4,2),
('2024-01-03',4,3),
('2024-01-03',4,3);

INSERT INTO Producto_Venta VALUES (1,191919191,5,(SELECT Precio FROM Producto WHERE codigoBarras = 191919191)*Cantidad),(2,192637465,2,(SELECT Precio FROM Producto WHERE codigoBarras = 192637465)*Cantidad),(4,192637465,2,(SELECT Precio FROM Producto WHERE codigoBarras = 192637465)*Cantidad);

SELECT * FROM Producto_Venta;

SELECT nombreCliente, Cantidad, Total FROM (Venta INNER JOIN Cliente ON idCliente = idClienteFK) INNER JOIN (Producto_Venta INNER JOIN Producto ON codigoBarras = codigoBarrasFK) ON idVenta = idVentaFK;

SELECT codigoBarras, nombreProducto, Precio FROM Producto INNER JOIN Venta;

#Falto insertar en Producto_Cliente y las consultas :( se me fue el tiempo corrigiendo y revisando cuales columnas deberian tener las tablas

#Conlsultar Cliente de la Máxima Venta
#En mi caso es mas complicado ya que únicamente incluyo el precio en Producto_Venta y no en Venta pero todas las consultas y datos se pueden conseguir correctamente
SELECT nombreCliente AS 'Cliente', MAX(Total) AS 'Máximo precio Total' FROM (Cliente INNER JOIN Venta ON idCliente = idClienteFK) INNER JOIN Producto_Venta ON idVenta = idVentaFK;

#Consultar el Cliente y Usuario de un venta específica
SELECT nombreCliente AS 'Cliente', apellidoUsuario AS 'Vendedor', idVenta FROM Cliente, Usuario, Venta WHERE idCliente = idClienteFK AND idUsuario = idUsuarioFK ORDER BY idVenta ASC;
#En mi caso retorna 10 tuplas lo cual es correcto ya que 10 ventas fueron realizadas

#Consultar los productos que compró un cliente especifico
SELECT nombreCliente, nombreProducto, Total FROM (Venta INNER JOIN Cliente ON idCliente = idClienteFK) INNER JOIN (Producto_Venta INNER JOIN Producto ON codigoBarras = codigoBarrasFK) ON idVenta = idVentaFK;
#Como solo he incluido 3 datos en Producto Venta, no debería haber retornado mas que estos. Al insertar mas con las ventas respectivas debería verse mas completo pero (según yo) la consulta funciona

#Consulta todos los Clientes que han comprado alguna vez
SELECT DISTINCT nombreCliente AS 'Cliente' FROM Cliente INNER JOIN Venta ON idCliente = idClienteFK;
#Si el cliente tiene el dato de idClienteFK en venta significa que compro algo, DISTINCT remueve los datos repetidos ya que un cliente puede haber comprado varias veces :D

#Insertarme a mi como usuario y a la profe como cliente
INSERT INTO Usuario(rolUsuario, nombreUsuario, apellidoUsuario) VALUE(2,'Antonio','Ayala');
INSERT INTO Cliente(nombreCliente, apellidoCliente, fechaNacimiento) VALUE('Tatiana','Cabrera','1985-11-24');
#Luego venderle un producto de bebé a la profe
INSERT INTO Venta(fechaVenta, idUsuarioFK, idClienteFK) VALUES('2024-09-27',5,8);
INSERT INTO Producto_Venta VALUES(11,103050709,1,80000);

#Modificar el número de orden (Venta en mi caso)
INSERT INTO Cliente(nombreCliente, apellidoCliente, fechaNacimiento) VALUE('Tatiana','Cabrera','1985-11-24');
INSERT INTO Venta(fechaVenta, idUsuarioFK, idClienteFK) VALUES('2024-09-27',5,8);
INSERT INTO Producto_Venta VALUES(11,103050709,1,80000);

#Describes de todo por si necesito mirar definiciones
DESCRIBE Cliente;
DESCRIBE Producto;
DESCRIBE Usuario;
DESCRIBE Venta;
DESCRIBE Producto_Venta;

#Selects de todo por si necesito mirar datos
SELECT * FROM Venta;
SELECT * FROM Cliente;
SELECT * FROM Producto;
SELECT * FROM Usuario;
SELECT * FROM Producto_Venta;

DELIMITER //
CREATE PROCEDURE Registrar_producto(IN c VARCHAR(25),IN n VARCHAR(50),IN m VARCHAR(15),IN p NUMERIC(17,2))
BEGIN
	INSERT INTO Producto(codigoBarras, nombreProducto, Marca, Precio) VALUES(c,n,m,p);
END //
DELIMITER ;

#Inactivar un Cliente, empezando por añadir el estado del cliente como atributo en la tabla ya que no existe
ALTER TABLE Cliente ADD COLUMN Estado ENUM('Activo','Inactivo') DEFAULT 'Activo';
#Volver a todos los clientes activos ya que como la columna acaba de ser creada todos estan como NULL
UPDATE Cliente SET Estado = 1 WHERE Estado IS NULL;

DELIMITER //
CREATE PROCEDURE inactivar_Cliente(id INT(11))
BEGIN
	UPDATE Cliente SET Estado = 2 WHERE idCliente = id;
END //
DELIMITER ;

#Procedimiento para consultar productos, Hice uno por codigo y otro por nombre.
DELIMITER //
CREATE PROCEDURE Consultar_Producto_codigo(Cod VARCHAR(25))
BEGIN
	SELECT nombreProducto, Marca, Precio FROM Producto WHERE codigoBarras = Cod;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE Consultar_Producto_nombre(nombre VARCHAR(50))
BEGIN
	SELECT codigoBarras, nombreProducto, Marca, Precio FROM Producto WHERE nombreProducto LIKE CONCAT('%', nombre,'%');
END //
DELIMITER ;

#Procedimiento para modificar la fecha de nacimiento de un cliente
DELIMITER //
CREATE PROCEDURE Modificar_fecha_nacimiento(id INT(11),fecha DATE)
BEGIN
	UPDATE Cliente SET fechaNacimiento = fecha WHERE idCliente = id;
END //
DELIMITER ;

#Consultar cliente que compro un producto especifico y numero de orden
CREATE VIEW compra_Cliente AS
SELECT nombreCliente AS 'Cliente', nombreProducto AS 'Producto', idVenta AS 'Numero de orden' FROM (Venta INNER JOIN Cliente ON idCliente = idClienteFK) INNER JOIN (Producto_Venta INNER JOIN Producto ON codigoBarras = codigoBarrasFK) ON idVenta = idVentaFK;

SELECT * FROM compra_Cliente;

#Calcular los productos que se vendan a un precio mayor del promedio

SELECT nombreProducto AS 'Producto', Precio FROM Producto WHERE Precio > (SELECT AVG(Precio) FROM Producto);

#Mostrar clientes que compren que el total de compra sea mayor al promedio de compras de la tienda
SELECT nombreCliente AS 'Cliente', Total FROM (Cliente INNER JOIN Venta ON idCliente = idClienteFK) INNER JOIN Producto_Venta ON idVenta = idVentaFK WHERE Total > (SELECT AVG(Total) FROM Producto_Venta);

#Mostrar promedio de precios de produtos comprados por clientes
SELECT nombreCliente AS 'Cliente', AVG(Precio) FROM (Venta INNER JOIN Cliente ON idCliente = idClienteFK) INNER JOIN (Producto_Venta INNER JOIN Producto ON codigoBarras = codigoBarrasFK) ON idVenta = idVentaFK;
